generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  name      String
  isBot     Boolean   @default(false)
  castles   Castle[]
  tribeType TribeType @relation(fields: [tribeId], references: [id])
  tribeId   String
  botAction BotAction?
}

model Castle {
  id              String           @id @default(uuid())
  x               Int
  y               Int
  user            User             @relation(fields: [userId], references: [id])
  userId          String
  castleResources CastleResources?
  unitGroups      UnitGroup[]
  attacksFrom     Attack[]         @relation("AttackCastleFrom")
  attacksTo       Attack[]         @relation("AttackCastleTo")
  unitOrders      UnitOrder[]
}

model CastleResources {
  id       String @id @default(uuid())
  gold     Int
  castle   Castle @relation(fields: [castleId], references: [id])
  castleId String @unique
}

model UnitType {
  id               String      @id @default(uuid())
  name             String
  attack           Int
  defence          Int
  speed            Int
  carryingCapacity Int
  cropConsumption  Int
  creatingSpeed    Int
  unitGroups       UnitGroup[]
  unitOrders       UnitOrder[]
  tribeType        TribeType  @relation(fields: [tribeTypeId], references: [id])
  tribeTypeId      String
}

model TribeType {
  id    String @id @default(uuid())
  name  String
  users User[]
  unitTypes UnitType[]
}

model Attack {
  id           String      @id @default(uuid())
  castleFrom   Castle      @relation(name: "AttackCastleFrom", fields: [castleFromId], references: [id])
  castleFromId String
  castleTo     Castle      @relation(name: "AttackCastleTo", fields: [castleToId], references: [id])
  castleToId   String
  unitGroups   UnitGroup[]
  dateTime     DateTime
  isReturning  Boolean
}

model UnitGroup {
  id            String   @id @default(uuid())
  unitType      UnitType @relation(fields: [unitTypeId], references: [id])
  unitTypeId    String
  amount        Int
  ownerCastle   Castle?  @relation(fields: [ownerCastleId], references: [id])
  ownerCastleId String?
  ownerAttack   Attack?  @relation(fields: [ownerAttackId], references: [id])
  ownerAttackId String?
}

model MapSettlement {
  id               String @id @default(uuid())
  direction        String
  settleAngleIndex Int
}

model UnitOrder {
  id         String   @id @default(uuid())
  castle     Castle   @relation(fields: [castleId], references: [id])
  castleId   String
  unitType   UnitType @relation(fields: [unitTypeId], references: [id])
  unitTypeId String
  amount     Int
  createDate DateTime
}

model BotAction {
  id         String         @id @default(uuid())
  user       User           @relation(fields: [userId], references: [id])
  userId     String         @unique
  date       DateTime
}
